# -*- coding: utf-8 -*-
"""Dataset Image

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SwQyeVOg4DOmzgYFEvvyxBFrUVNjhPCV
"""

# Commented out IPython magic to ensure Python compatibility.
import os
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import nibabel as nib # We'll call nibabel nib for short as we'll be calling it lots
from nibabel.processing import resample_from_to 
import scipy.ndimage as ndi
import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
import cv2

from google.colab import drive
drive.mount('/content/drive')

! unzip /content/drive/MyDrive/ColabNotebooks/Data.zip

t1_img = nib.load('/content/Data/S01V02_MPRAGE.nii.gz') # Import the data. Scaling='fp' is the equievlent of the -f flag in ptoa
t2_img = nib.load('/content/Data/S01V02_T1W.nii.gz')
t3_img = nib.load('/content/Data/S01V02_T2W.nii.gz')
t1_voxels = t1_img.get_fdata() # Get a 3D array of voxels
t2_voxels = t2_img.get_fdata()
t3_voxels = t3_img.get_fdata()

t1_img = nib.load('/content/Data/S01V02_MPRAGE.nii.gz') # Import the data. Scaling='fp' is the equievlent of the -f flag in ptoa
t2_img = nib.load('/content/Data/S01V02_T1W.nii.gz')
t3_img = nib.load('/content/Data/S01V02_T2W.nii.gz')
t1_voxels = t1_img.get_fdata() # Get a 3D array of voxels
t2_voxels = t2_img.get_fdata()
t3_voxels = t3_img.get_fdata()
plt.imshow(ndi.rotate(t1_voxels[:,:,t1_voxels.shape[2]//2],90), cmap='gray_r') # Show the central axial slice
plt.title('MPRAGE')
plt.axis(True) # Turn off the axis
plt.show()
plt.imshow(ndi.rotate(t2_voxels[:,:,t2_voxels.shape[2]//2],90), cmap='gray_r')
plt.title('T1W') # Give the plot a title
plt.axis(True) # Turn off the axis
plt.show() # Show the plot
plt.imshow(ndi.rotate(t2_voxels[:,:,t2_voxels.shape[2]//2],90), cmap='gray_r') # Show the central axial slice
plt.title('T2W') # Give the plot a title
plt.axis(True) # Turn off the axis
plt.show()
t1_hdr = t1_img.header # Get the images header
zoom = t1_hdr.get_zooms()
print('The voxels of this image are {0:.1f} x {1:.1f} x {2:.1f} mm'.format(*zoom)) # Print the size of each voxel to the console
t1_affine = t1_img.affine # We'll need this to save any output data. It tells us the mapping between the voxel space and scanner space

mask_img = nib.load('/content/Data/S01V02_T2W_mask.nii.gz')
mask_voxels = mask_img.get_fdata()>0.5
plt.imshow(ndi.rotate(mask_voxels[:, :, mask_voxels.shape[2]//2],90))
plt.title('Mask')
plt.axis(False)
plt.show()

masked_t1_voxels = mask_voxels * t1_voxels
plt.imshow(ndi.rotate(masked_t1_voxels[:, :, masked_t1_voxels.shape[2]//2],90), cmap='gray')
plt.title('Masked kidney')
plt.axis(False)
plt.show()